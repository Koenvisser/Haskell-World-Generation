name: Haddock

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Setup Haskell
      uses: haskell-actions/setup@v2
      id: setup
      with:
        ghc-version: '9.6.2'
        cabal-version: '3.0.0.0'

    - name: Configure the build
      run: |
        cabal configure --disable-documentation
        cabal build all --dry-run
      # The last step generates dist-newstyle/cache/plan.json for the cache key.

    - name: Restore cached dependencies
      uses: actions/cache/restore@v3
      id: cache
      env:
        key: ${{ runner.os }}-ghc-${{ steps.setup.outputs.ghc-version }}-cabal-${{ steps.setup.outputs.cabal-version }}
      with:
        path: ${{ steps.setup.outputs.cabal-store }}
        key: ${{ env.key }}-plan-${{ hashFiles('**/plan.json') }}
        restore-keys: ${{ env.key }}-

    - name: Install dependencies
      # If we had an exact cache hit, the dependencies will be up to date.
      if: steps.cache.outputs.cache-hit != 'true'
      run: cabal build all --only-dependencies

    # Cache dependencies already here, so that we do not have to rebuild them should the subsequent steps fail.
    - name: Save cached dependencies
      uses: actions/cache/save@v3
      # If we had an exact cache hit, trying to save the cache would error because of key clash.
      if: steps.cache.outputs.cache-hit != 'true'
      with:
        path: ${{ steps.setup.outputs.cabal-store }}
        key: ${{ steps.cache.outputs.cache-primary-key }}

    - name: Build
      run: cabal build all

    - name: Build documentation
      run: cabal haddock-project --hackage

    - name: Publish documentation
      uses: JamesIves/github-pages-deploy-action@4.1.5
      with:
        branch: gh-pages  # The branch the action should deploy to.
        folder: haddocks  # The folder the action should deploy.
